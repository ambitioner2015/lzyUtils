apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // 动态设置一些额外信息,使用 getString(R.string.build_time)
//        resValue "string", "build_time", buildTime()
//        resValue "string", "build_host", hostName()
//        resValue "string", "build_revision", revision()
        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        checkReleaseBuilds false
    }

    signingConfigs {

        def Properties props = new Properties()
        props.load(new FileInputStream(file('../local.properties')))
        def Properties keys = new Properties()

        // 如果读取不到'keystore.props.file'属性，就使用debug keystore
//        if (props['keystore.props.file']) {
//            keys.load(new FileInputStream(file(props['keystore.props.file'])))
//        } else {
//            keys["store"] = '../local/keystore/debug.keystore'
//            keys["alias"] = 'androiddebugkey'
//            keys["storePass"] = 'android'
//            keys["pass"] = 'android'
//        }

        debug {
//            storeFile file(keys["store"])
//            keyAlias keys["alias"]
//            storePassword keys["storePass"]
//            keyPassword keys["pass"]
        }

        release {
            // release版本使用assert确保存在该属性否则报错，避免错误打包
//            assert props['keystore.props.file'];
//            storeFile file(keys["store"])
//            keyAlias keys["alias"]
//            storePassword keys["storePass"]
//            keyPassword keys["pass"]
        }

        preview {

        }
    }


    buildTypes {
        // minifyEnabled 混淆处理
        // shrinkResources 去除无用资源
        // signingConfig 签名
        // proguardFiles 混淆配置
        // applicationIdSuffix 增加APP ID的后缀
        // debuggable 是否保留调试信息

        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug

            manifestPlaceholders = [UMENG_APPKEY_VALUE: "xxxxxxxx"] // 替换AndroidManifest中的占位符
            buildConfigField "String", "UMENG_APPKEY", "\"xxxxxxx\""
            buildConfigField "String", "HOST", "\"http://100.100.100.100:8888\""
            buildConfigField "String", "API_URL", '"http://api.douban.com/v2/"'
        }

        release {
            manifestPlaceholders = [app_label: "@string/app_name"]
            debuggable false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro',
                    project(":module:xkm_launch").file("proguard-rules.pro")

            manifestPlaceholders = [UMENG_APPKEY_VALUE: "xxxxxx"]
            buildConfigField "String", "UMENG_APPKEY", "\"xxxxxx\""
            buildConfigField "String", "HOST", "\"http://xxx.xxx.com\""
            buildConfigField "String", "API_URL", '"http://api.douban.com/v2/"'
        }

        preview {
            applicationIdSuffix ".preview"
            debuggable true
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.preview
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // 多渠道打包
    productFlavors {
        dev {
            manifestPlaceholders = [channel: "dev"]
        }
        official {
            manifestPlaceholders = [channel: "official"]
        }
        // ... ...
        wandoujia {
            manifestPlaceholders = [channel: "wandoujia"]
        }
        xiaomi {
            manifestPlaceholders = [channel: "xiaomi"]
        }
        "360" { // flavor名如果是数字开头，必须用引号引起来
            manifestPlaceholders = [channel: "360"]
        }
    }

    // rename the apk with the version name (自定义导出的APK名称)
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            output.outputFile = new File(
//                    output.outputFile.parent,
//                    "BobLibrary-${variant.buildType.name}-${variant.versionName}-${variant.productFlavors[0].name}.apk".toLowerCase())
//        }
//    }

    // rename the apk with the version name add output file sub folder by build type (自定义导出的APK名称 + 分类)
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent + "/${variant.buildType.name}",
                    "XKnife-${variant.buildType.name}-${variant.versionName}-${variant.productFlavors[0].name}.apk".toLowerCase())
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
//    compile 'com.android.support:design:24.2.1'
    compile 'com.android.support:design:25.3.0'
    compile 'com.android.support:support-vector-drawable:24.2.1'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    // aspect
    compile rootProject.ext.dependencies["aspectjrt"]

    // butterknife
    apt 'com.jakewharton:butterknife-compiler:8.0.1'
    compile rootProject.ext.dependencies["butterknife"]

    if (!isModuleDebug.toBoolean()) {
        compile project(':module:xkm_launch')
        compile project(':module:xkm_userlogin')
        compile project(':module:news')
    } else {
        compile project(':bridge:xkb_bridge')
    }

    // leakcanary
    debugCompile rootProject.ext.dependencies["leakcanary_debug"]
    releaseCompile rootProject.ext.dependencies["leakcanary_release"]
    testCompile rootProject.ext.dependencies["leakcanary_test"]
}
